name: Expose File‑Hash API via Cloudflare Tunnel

on:
  schedule:
    # 每 5 小时的整点触发
    - cron: '0 */5 * * *'
  workflow_dispatch:

jobs:
  expose-api:
    runs-on: ubuntu-latest
    env:
      HOSTNAME: ${{ secrets.CLOUDFLARE_HOSTNAME }}
      TUNNEL_ID: ${{ secrets.CLOUDFLARE_TUNNEL_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn python-multipart

      - name: Install system packages & Cloudflared
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar jq
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.tgz -O cf.tgz
          tar -xzf cf.tgz
          sudo mv cloudflared /usr/local/bin/

      - name: Install tunnel credentials via refresh token
        run: |
          mkdir -p ~/.cloudflared
          cloudflared service install ${{ secrets.CF_INSTALL_TOKEN }}

      - name: Write Cloudflared config
        run: |
          cat << EOF > ~/.cloudflared/config.yml
          tunnel: ${{ env.TUNNEL_ID }}
          credentials-file: ~/.cloudflared/${{ env.TUNNEL_ID }}.json

          ingress:
            - hostname: ${{ env.HOSTNAME }}
              service: http://localhost:8000
            - service: http_status:404
          EOF

      - name: Start FastAPI server in background
        run: |
          nohup python main/file_hash_api_server.py & sleep 5

      - name: Run Cloudflare Tunnel
        run: |
          nohup cloudflared tunnel run ${{ env.TUNNEL_ID }} & sleep 5

      - name: Wait for new API to be healthy
        run: |
          echo "Waiting for API on https://${{ env.HOSTNAME }}/api/v1/hash/algorithms ..."
          retries=0
          until [[ "$(curl -s -o /dev/null -w '%{http_code}' https://${{ env.HOSTNAME }}/api/v1/hash/algorithms)" == "200" ]]; do
            ((retries++))
            if [ $retries -ge 12 ]; then
              echo "⏱ Timeout waiting for API"; exit 1
            fi
            sleep 5
          done
          echo "✅ New API is healthy."

      - name: Cancel previous workflow run
        env:
          REPO: ${{ github.repository }}
        run: |
          echo "Fetching last 2 runs of this workflow..."
          PREV_ID=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$REPO/actions/workflows/deploy-file_hash_api-with_cloudflare.yml/runs?per_page=2" \
            | jq -r '.workflow_runs[1].id')
          echo "Canceling previous run: $PREV_ID"
          curl -X POST -s \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$REPO/actions/runs/$PREV_ID/cancel"

      - name: Keep runner alive
        run: |
          echo "Tunnel and API are up! Access via https://${{ env.HOSTNAME }}"
          while true; do sleep 60; done
