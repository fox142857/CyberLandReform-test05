name: Expose File‑Hash API via Cloudflare Tunnel

on:
  schedule:
    - cron: '0 */5 * * *'
  workflow_dispatch:

jobs:
  expose-api:
    runs-on: ubuntu-latest
    env:
      HOSTNAME: ${{ secrets.CLOUDFLARE_HOSTNAME }}
      TUNNEL_ID: ${{ secrets.CLOUDFLARE_TUNNEL_ID }}
      TUNNEL_TOKEN: ${{ secrets.CF_INSTALL_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn python-multipart

      - name: Install system packages & cloudflared
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/
          cloudflared --version

      - name: Write Cloudflared config
        run: |
          mkdir -p ~/.cloudflared
          cat > ~/.cloudflared/config.yml <<EOF
          tunnel: ${{ env.TUNNEL_ID }}
          # credentials-file not needed when using --token on run

          ingress:
            - hostname: ${{ env.HOSTNAME }}
              service: http://localhost:8000
            - service: http_status:404
          EOF

      - name: Start FastAPI in background
        run: |
          nohup python main/file_hash_api_server.py & sleep 5

      - name: Run Cloudflare Tunnel
        run: |
          nohup cloudflared tunnel run --token "${{ env.TUNNEL_TOKEN }}" "${{ env.TUNNEL_ID }}" & sleep 5

      - name: Wait for API health
        run: |
          for i in {1..12}; do
            if curl -s -o /dev/null -w '%{http_code}' https://${{ env.HOSTNAME }}/api/v1/hash/algorithms | grep -q '^200$'; then
              echo "✅ API healthy"
              exit 0
            fi
            echo "🔄 attempt $i; retrying in 5s"
            sleep 5
          done
          echo "❌ API failed to become healthy" && exit 1

      - name: Cancel previous run
        env:
          REPO: ${{ github.repository }}
        run: |
          PREV=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$REPO/actions/workflows/${{ github.workflow }}/runs?per_page=2" \
            | jq -r '.workflow_runs[1].id')
          [ "$PREV" != "null" ] && \
            curl -X POST -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
                 "https://api.github.com/repos/$REPO/actions/runs/$PREV/cancel" || echo "No previous run to cancel"

      - name: Keep runner alive
        run: |
          echo "🚀 up at https://${{ env.HOSTNAME }}"
          while true; do sleep 60; done
