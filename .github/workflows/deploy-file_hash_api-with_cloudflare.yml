name: Expose File‚ÄëHash API via Cloudflare Tunnel

on:
  schedule:
    - cron: '0 */5 * * *'
  workflow_dispatch:

jobs:
  expose-api:
    runs-on: ubuntu-latest
    env:
      HOSTNAME: ${{ secrets.CLOUDFLARE_HOSTNAME }}
      TUNNEL_ID: ${{ secrets.CLOUDFLARE_TUNNEL_ID }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn python-multipart

      - name: Install system packages & Cloudflared
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar jq
          # ‰∏ãËΩΩ cloudflared
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.tgz -O cf.tgz
          # Â∞ùËØïËß£ÂéãÔºåÂøΩÁï•ÈùûËá¥ÂëΩÈîôËØØ
          tar -xzf cf.tgz || echo "‚ö†Ô∏è tar exit code $? ‚Äî ignoring"
          # Á°Æ‰øù cloudflared ‰∫åËøõÂà∂Â≠òÂú®
          if [ ! -f cloudflared ]; then
            echo "‚ùå cloudflared binary not found after tar; aborting"
            exit 1
          fi
          sudo mv cloudflared /usr/local/bin/

      - name: Install tunnel credentials via refresh token
        run: |
          mkdir -p ~/.cloudflared
          cloudflared service install ${{ secrets.CF_INSTALL_TOKEN }}

      - name: Write Cloudflared config
        run: |
          cat << EOF > ~/.cloudflared/config.yml
          tunnel: ${{ env.TUNNEL_ID }}
          credentials-file: ~/.cloudflared/${{ env.TUNNEL_ID }}.json

          ingress:
            - hostname: ${{ env.HOSTNAME }}
              service: http://localhost:8000
            - service: http_status:404
          EOF

      - name: Start FastAPI in background
        run: |
          nohup python main/file_hash_api_server.py & sleep 5

      - name: Run Cloudflare Tunnel
        run: |
          nohup cloudflared tunnel run ${{ env.TUNNEL_ID }} & sleep 5

      - name: Wait for new API to be healthy
        run: |
          echo "Waiting for API at https://${{ env.HOSTNAME }}/api/v1/hash/algorithms..."
          for i in {1..12}; do
            status=$(curl -s -o /dev/null -w '%{http_code}' https://${{ env.HOSTNAME }}/api/v1/hash/algorithms)
            if [ "$status" = "200" ]; then
              echo "‚úÖ API is healthy"; break
            fi
            echo "üîÑ attempt $i, status $status; retrying in 5s"
            sleep 5
          done

      - name: Cancel previous run
        env:
          REPO: ${{ github.repository }}
        run: |
          PREV_ID=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$REPO/actions/workflows/${{ github.workflow }}/runs?per_page=2" \
            | jq -r '.workflow_runs[1].id')
          if [ "$PREV_ID" != "null" ]; then
            echo "Canceling previous run $PREV_ID"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
              "https://api.github.com/repos/$REPO/actions/runs/$PREV_ID/cancel"
          fi

      - name: Keep runner alive
        run: |
          echo "üöÄ Tunnel & API up at https://${{ env.HOSTNAME }}"
          while true; do sleep 60; done
